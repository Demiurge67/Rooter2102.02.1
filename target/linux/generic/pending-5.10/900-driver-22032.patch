--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -1060,6 +1060,26 @@
 	{QMI_FIXED_INTF(0x05c6, 0x9021, 1)},
 	{QMI_FIXED_INTF(0x05c6, 0x9022, 2)},
 	{QMI_QUIRK_SET_DTR(0x05c6, 0x9025, 4)},	/* Alcatel-sbell ASB TL131 TDD LTE (China Mobile) */
+	{QMI_QUIRK_SET_DTR(0x03f0, 0x0857, 1)},
+	{QMI_QUIRK_SET_DTR(0x05c6, 0xf601, 5)},
+	{QMI_FIXED_INTF(0x413c, 0x81d8, 0)},	/* Foxconn T77W968 LTE */
+	{QMI_FIXED_INTF(0x1bc7, 0x1910, 0)},	/* LN960 */
+	{QMI_FIXED_INTF(0x05c6, 0x90db, 2)},
+	{QMI_FIXED_INTF(0x2dee, 0x4d22, 5)},
+	{QMI_FIXED_INTF(0x161c, 0x9115, 4)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x9091, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x9090, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x9090, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90b1, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90b1, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d2, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d2, 10)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d3, 8)},
+	{QMI_QUIRK_SET_DTR(0x1199, 0x90d3, 10)},
+	{QMI_MATCH_FF_FF_FF(0x2c7c, 0x0900)},	/* Quectel RM500Q-CN */
+	{QMI_MATCH_FF_FF_FF(0x2c7c, 0x030b)},	/* Quectel EM060 */
+	{QMI_MATCH_FF_FF_FF(0x2c7c, 0x0801)},	/* Quectel RM520 */
+	{QMI_MATCH_FF_FF_FF(0x2c7c, 0x6005)},	/* Quectel EC200A */
 	{QMI_FIXED_INTF(0x05c6, 0x9026, 3)},
 	{QMI_FIXED_INTF(0x05c6, 0x902e, 5)},
 	{QMI_FIXED_INTF(0x05c6, 0x9031, 5)},

--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@ -48,6 +48,9 @@
 static void option_instat_callback(struct urb *urb);
 
 /* Vendor and product IDs */
+#define MEIG_VENDOR_ID				0x05c6
+#define MEIG_PRODUCT_f601			0xf601
+#define MEIG_PRODUCT_9025			0x9025
 #define OPTION_VENDOR_ID			0x0AF0
 #define OPTION_PRODUCT_COLT			0x5000
 #define OPTION_PRODUCT_RICOLA			0x6000
@@ -262,6 +265,8 @@
 #define QUECTEL_PRODUCT_EC200S_CN		0x6002
 #define QUECTEL_PRODUCT_EC200T			0x6026
 #define QUECTEL_PRODUCT_RM500K			0x7001
+#define QUECTEL_PRODUCT_EM20			0x0620
+#define QUECTEL_PRODUCT_RM500QCN		0x0900
 
 #define CMOTECH_VENDOR_ID			0x16d8
 #define CMOTECH_PRODUCT_6001			0x6001
@@ -603,6 +608,48 @@
 
 
 static const struct usb_device_id option_ids[] = {
+	{ USB_DEVICE(MEIG_VENDOR_ID, MEIG_PRODUCT_f601) },
+	{ USB_DEVICE(MEIG_VENDOR_ID, MEIG_PRODUCT_9025) },
+	{ USB_DEVICE(0x03f0, 0x0e57)},
+	{ USB_DEVICE(QUALCOMM_VENDOR_ID, 0x5042),
+	  .driver_info = RSVD(3) },
+	{ USB_DEVICE(0x03f0, 0x9d1d), /* lt4120 (QMI) */
+	.driver_info = NCTRL(0) | RSVD(1) },
+	{ USB_DEVICE_INTERFACE_CLASS(0x03f0, 0x9e1d, 0xff), /* lt4120 (MBIM) */
+	.driver_info = NCTRL(0) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0e8d, 0x7127, 0xff, 0x00, 0x00),
+ 	  .driver_info = RSVD(0) | RSVD(1) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(0x0e8d, 0x7126, 0xff, 0x00, 0x00),
+ 	  .driver_info = RSVD(0) | RSVD(1) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, 0x6005, 0xff, 0, 0) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, QUECTEL_PRODUCT_EM20, 0xff, 0xff, 0x30) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, QUECTEL_PRODUCT_EM20, 0xff, 0, 0) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, QUECTEL_PRODUCT_EM20, 0xff, 0xff, 0xff),
+	  .driver_info = RSVD(1) | RSVD(2) | RSVD(3) | RSVD(4) | NUMEP2 },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, QUECTEL_PRODUCT_RM500QCN, 0xff, 0, 0) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, QUECTEL_PRODUCT_RM500QCN, 0xff, 0xff, 0x30) },
+	{ USB_DEVICE_AND_INTERFACE_INFO(QUECTEL_VENDOR_ID, QUECTEL_PRODUCT_RM500QCN, 0xff, 0xff, 0x10),
+	  .driver_info = ZLP },
+	{ USB_DEVICE(QUALCOMM_VENDOR_ID, 0x90db), /* SIMCom SIM8200 */
+	  .driver_info = RSVD(2) },
+	{ USB_DEVICE_INTERFACE_CLASS(TELIT_VENDOR_ID, 0x1204, 0xff),	/* Telit LE910Cx (MBIM) */
+	  .driver_info = NCTRL(0) | RSVD(1) },
+	{ USB_DEVICE(0x413c, 0x81d8),						/* Foxconn T77W968 */
+	.driver_info = RSVD(0) | RSVD(1) | RSVD(6) },
+	{ USB_DEVICE(0x1bc7, 0x1910),						/* Ln960 */
+	.driver_info = RSVD(0) | RSVD(1) | RSVD(6) },
+	{ USB_DEVICE(TELIT_VENDOR_ID, 0x1911),				/* Ln960 */
+	.driver_info = RSVD(4) | RSVD(5) },
+	{ USB_DEVICE(0x03f0, 0x0857),				/* Telit LN940 (QMI) */
+	  .driver_info = NCTRL(0) | RSVD(1) },
+	{ USB_DEVICE_INTERFACE_CLASS(0x03f0, 0x0a57, 0xff),	/* Telit LN940 (MBIM) */
+	  .driver_info = NCTRL(0) },
+	{ USB_DEVICE(0x2cb7, 0x0111),				/* FM150 MBIM */
+	  .driver_info = RSVD(1) | RSVD(2) | RSVD(3) },
+	{ USB_DEVICE_INTERFACE_CLASS(0x2dee, 0x4d22, 0xff),
+	 .driver_info = RSVD(4) | RSVD(5) },
+	{ USB_DEVICE_INTERFACE_CLASS(0x161c, 0x9115, 0xff),
+	 .driver_info = RSVD(4) | RSVD(5) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_COLT) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA_LIGHT) },
@@ -2240,12 +2282,19 @@
 {
 	struct usb_interface_descriptor *iface_desc =
 				&serial->interface->cur_altsetting->desc;
+	struct usb_device_descriptor *dev_desc = &serial->dev->descriptor;
 	unsigned long device_flags = id->driver_info;
 
 	/* Never bind to the CD-Rom emulation interface	*/
 	if (iface_desc->bInterfaceClass == USB_CLASS_MASS_STORAGE)
 		return -ENODEV;
 
+		if (dev_desc->idVendor == cpu_to_le16(MEIG_VENDOR_ID) &&
+	    (dev_desc->idProduct == cpu_to_le16(MEIG_PRODUCT_9025) ||
+	    dev_desc->idProduct == cpu_to_le16(MEIG_PRODUCT_f601)) &&
+		iface_desc->bInterfaceNumber >= 4)
+			return -ENODEV;
+
 	/*
 	 * Don't bind reserved interfaces (like network ones) which often have
 	 * the same class/subclass/protocol as the serial interfaces.  Look at

--- a/drivers/usb/serial/qcserial.c
+++ b/drivers/usb/serial/qcserial.c
@@ -168,6 +168,8 @@
 	{DEVICE_SWI(0x1199, 0x90d2)},	/* Sierra Wireless EM9191 QDL */
 	{DEVICE_SWI(0x1199, 0xc080)},	/* Sierra Wireless EM7590 QDL */
 	{DEVICE_SWI(0x1199, 0xc081)},	/* Sierra Wireless EM7590 */
+	{DEVICE_SWI(0x1199, 0x90b1)},	/* Sierra Wireless EM7511 */
+	{DEVICE_SWI(0x1199, 0x90d3)},	/* Sierra Wireless EM9191 MBIM */
 	{DEVICE_SWI(0x413c, 0x81a2)},	/* Dell Wireless 5806 Gobi(TM) 4G LTE Mobile Broadband Card */
 	{DEVICE_SWI(0x413c, 0x81a3)},	/* Dell Wireless 5570 HSPA+ (42Mbps) Mobile Broadband Card */
 	{DEVICE_SWI(0x413c, 0x81a4)},	/* Dell Wireless 5570e HSPA+ (42Mbps) Mobile Broadband Card */
