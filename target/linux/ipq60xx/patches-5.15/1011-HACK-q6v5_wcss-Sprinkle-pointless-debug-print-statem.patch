From d5701fe34dbf374ce3518a38695f713d02268232 Mon Sep 17 00:00:00 2001
From: Alexandru Gagniuc <mr.nuke.me@gmail.com>
Date: Mon, 29 Aug 2022 21:45:09 -0500
Subject: [PATCH 1011/1011] [HACK] q6v5_wcss: Sprinkle pointless debug print
 statements

---
 drivers/remoteproc/qcom_common.c     |  4 ++++
 drivers/remoteproc/qcom_q6v5_wcss.c  | 25 ++++++++++++++++++++++++-
 drivers/remoteproc/remoteproc_core.c |  8 ++++++++
 3 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/drivers/remoteproc/qcom_common.c b/drivers/remoteproc/qcom_common.c
index 4b91e3c9eafa..fdab60430932 100644
--- a/drivers/remoteproc/qcom_common.c
+++ b/drivers/remoteproc/qcom_common.c
@@ -201,7 +201,9 @@ static void glink_subdev_unprepare(struct rproc_subdev *subdev)
 {
 	struct qcom_rproc_glink *glink = to_glink_subdev(subdev);
 
+	dev_err(glink->dev, "%s: presub \n", __func__);
 	qcom_glink_ssr_notify(glink->ssr_name);
+	dev_err(glink->dev, "%s: done \n", __func__);
 }
 
 /**
@@ -458,8 +460,10 @@ static void ssr_notify_unprepare(struct rproc_subdev *subdev)
 		.crashed = false,
 	};
 
+	pr_err("%s: notif \n", __func__);
 	srcu_notifier_call_chain(&ssr->info->notifier_list,
 				 QCOM_SSR_AFTER_SHUTDOWN, &data);
+	pr_err("%s: done \n", __func__);
 }
 
 /**
diff --git a/drivers/remoteproc/qcom_q6v5_wcss.c b/drivers/remoteproc/qcom_q6v5_wcss.c
index 694d97a0d807..ef50ba6b068b 100644
--- a/drivers/remoteproc/qcom_q6v5_wcss.c
+++ b/drivers/remoteproc/qcom_q6v5_wcss.c
@@ -178,6 +178,9 @@ static int ipq6018_clks_prepare_enable(struct q6v5_wcss *wcss)
 {
 	int ret;
 
+	dev_err(wcss->dev, "%s\n", __func__);
+
+
 	ret = clk_prepare_enable(wcss->gcc_sys_noc_wcss_ahb_clk);
 	if (ret)
 		return ret;
@@ -212,6 +215,8 @@ static int q6v5_wcss_reset(struct q6v5_wcss *wcss)
 	u32 val;
 	int i;
 
+	dev_err(wcss->dev, "%s\n", __func__);
+
 	desc = device_get_match_data(wcss->dev);
 	if (desc == &wcss_ipq6018_res_init) {
 		if (desc->aon_reset_required) {
@@ -353,6 +358,8 @@ static int q6v5_wcss_start(struct rproc *rproc)
 	struct q6v5_wcss *wcss = rproc->priv;
 	int ret;
 
+	dev_err(wcss->dev, "%s\n", __func__);
+
 	ret = clk_prepare_enable(wcss->prng_clk);
 	if (ret) {
 		dev_err(wcss->dev, "prng clock enable failed\n");
@@ -367,6 +374,8 @@ static int q6v5_wcss_start(struct rproc *rproc)
 			dev_err(wcss->dev, "wcss_reset failed\n");
 			return ret;
 		}
+
+		dev_err(wcss->dev, "%s: I'm scared, therefore I goto\n", __func__);
 		goto wait_for_reset;
 	}
 
@@ -874,6 +883,8 @@ static int q6v5_wcss_stop(struct rproc *rproc)
 	struct q6v5_wcss *wcss = rproc->priv;
 	int ret;
 
+	dev_err(wcss->dev, "%s\n", __func__);
+
 	if (wcss->need_mem_protection) {
 		ret = qcom_scm_pas_shutdown(WCNSS_PAS_ID);
 		if (ret) {
@@ -885,6 +896,7 @@ static int q6v5_wcss_stop(struct rproc *rproc)
 
 	/* WCSS powerdown */
 	if (wcss->requires_force_stop) {
+		dev_err(wcss->dev, "%s: Forcetopsky \n", __func__);
 		ret = qcom_q6v5_request_stop(&wcss->q6v5, NULL);
 		if (ret == -ETIMEDOUT) {
 			dev_err(wcss->dev, "timed out on wait\n");
@@ -897,10 +909,12 @@ static int q6v5_wcss_stop(struct rproc *rproc)
 		if (ret)
 			return ret;
 	} else {
+		dev_err(wcss->dev, "%s: Preodonsky \n", __func__);
 		ret = q6v5_wcss_powerdown(wcss);
 		if (ret)
 			return ret;
 
+		dev_err(wcss->dev, "%s: Podonsky \n", __func__);
 		/* Q6 Power down */
 		ret = q6v5_q6_powerdown(wcss);
 		if (ret)
@@ -908,9 +922,14 @@ static int q6v5_wcss_stop(struct rproc *rproc)
 	}
 
 pas_done:
+	dev_err(wcss->dev, "%s: pasdonsky \n", __func__);
 	clk_disable_unprepare(wcss->prng_clk);
 	qcom_q6v5_unprepare(&wcss->q6v5);
 
+	dev_err(wcss->dev, "%s: outsky \n", __func__);
+	WARN_ON(1);
+	mdelay(420);
+
 	return 0;
 }
 
@@ -1106,6 +1125,8 @@ static int q6v5_alloc_memory_region(struct q6v5_wcss *wcss)
 static int ipq6018_init_clock(struct q6v5_wcss *wcss)
 {
 	int ret;
+	dev_err(wcss->dev, "%s\n", __func__);
+
 
 	wcss->prng_clk = devm_clk_get(wcss->dev, "prng");
 	if (IS_ERR(wcss->prng_clk)) {
@@ -1276,6 +1297,8 @@ static int q6v5_wcss_probe(struct platform_device *pdev)
 	struct rproc *rproc;
 	int ret;
 
+	dev_err(&pdev->dev, "%s\n", __func__);
+
 	desc = device_get_match_data(&pdev->dev);
 	if (!desc)
 		return -EINVAL;
@@ -1372,7 +1395,7 @@ static const struct wcss_data wcss_ipq6018_res_init = {
 	.ssr_name = "q6wcss",
 	.ops = &q6v5_wcss_ipq8074_ops,
 	.requires_force_stop = false,
-	.need_mem_protection = true,
+	.need_mem_protection = false,
 	.need_auto_boot = false,
 };
 
diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 775df165eb45..6c6ab68ca244 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1822,9 +1822,13 @@ static int rproc_stop(struct rproc *rproc, bool crashed)
 	if (!rproc->ops->stop)
 		return -EINVAL;
 
+	dev_err(dev, "%s: presub \n", __func__);
+
 	/* Stop any subdevices for the remote processor */
 	rproc_stop_subdevices(rproc, crashed);
 
+	dev_err(dev, "%s: postsub \n", __func__);
+
 	/* the installed resource table is no longer accessible */
 	ret = rproc_reset_rsc_table_on_stop(rproc);
 	if (ret) {
@@ -1832,6 +1836,8 @@ static int rproc_stop(struct rproc *rproc, bool crashed)
 		return ret;
 	}
 
+	dev_err(dev, "%s: really-stop \n", __func__);
+
 
 	/* power off the remote processor */
 	ret = rproc->ops->stop(rproc);
@@ -1840,6 +1846,8 @@ static int rproc_stop(struct rproc *rproc, bool crashed)
 		return ret;
 	}
 
+	dev_err(dev, "%s: no really, you're stopped \n", __func__);
+
 	rproc_unprepare_subdevices(rproc);
 
 	rproc->state = RPROC_OFFLINE;
-- 
2.37.1

